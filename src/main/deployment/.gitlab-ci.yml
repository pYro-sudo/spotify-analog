stages:
  - deploy_vm
  - setup_kubeconfig
  - setup_nginx
  - deploy_infra
  - deploy_app
  - verify

variables:
  KUBECONFIG: "/etc/kubernetes/admin.conf"
  DOMAIN: "yourdomain.com"  # Replace with your actual domain
  VM_NAME: "k8s-node-1"

deploy_vm:
  stage: deploy_vm
  script:
    - kubectl apply -f vm-deployment.yaml
    - |
      for i in {1..30}; do
        if kubectl get vm $VM_NAME -o jsonpath='{.status.ready}' | grep -q "true"; then
          break
        fi
        sleep 10
      done
  tags:
    - k8s

setup_kubeconfig:
  stage: setup_kubeconfig
  script:
    - mkdir -p /etc/rancher/k3s
    - kubectl get secret ${VM_NAME}-kubeconfig -o jsonpath='{.data.value}' | base64 -d > $KUBECONFIG
    - chmod 600 $KUBECONFIG
  needs: ["deploy_vm"]
  tags:
    - k8s

setup_nginx:
  stage: setup_nginx
  script:
    - |
      VM_POD=$(kubectl get pods -l kubevirt.io/domain=$VM_NAME -o jsonpath='{.items[0].metadata.name}')
      kubectl exec $VM_POD -- bash -c "apt-get update && apt-get install -y nginx"
      cat <<EOF > elsatic-adapter.conf
      worker_processes auto;
      worker_rlimit_nofile 100000;
      
      events {
          worker_connections 4096;
          multi_accept on;
          use epoll;
      }
      
      http {
          $(grep -A 1000 '^http {' elsatic-adapter.conf | tail -n +2)
      EOF
      kubectl cp elsatic-adapter.conf $VM_POD:/etc/nginx/nginx.conf
      kubectl exec $VM_POD -- bash -c "nginx -t && systemctl restart nginx"
      kubectl exec $VM_POD -- systemctl enable nginx
  needs: ["setup_kubeconfig"]
  tags:
    - k8s

deploy_infrastructure:
  stage: deploy_infra
  script:
    - kubectl apply -f service-account.yaml
    - kubectl apply -f vault-cluster-role.yaml
    - kubectl apply -f vault.yaml
    - |
      for i in {1..30}; do
        if kubectl get pods -l app=vault --field-selector=status.phase=Running | grep -q "vault"; then
          break
        fi
        sleep 10
      done
    - kubectl apply -f redis-deployment.yaml
    - kubectl apply -f rabbitmq-deployment.yaml
    - kubectl apply -f elasticsearch-deployment.yaml
    - kubectl apply -f elastic-discovery-service.yaml
    - kubectl apply -f cert-manager.yaml
    - |
      for i in {1..30}; do
        if kubectl get pods -l app=elasticsearch --field-selector=status.phase=Running | grep -q "elasticsearch"; then
          break
        fi
        sleep 10
      done
  needs: ["setup_nginx"]
  tags:
    - k8s

deploy_application:
  stage: deploy_app
  script:
    - kubectl apply -f app-config.yaml
    - kubectl apply -f app-secrets.yaml
    - kubectl apply -f vault-agent-config.yaml
    - kubectl apply -f quarkus-pdb.yaml
    - kubectl apply -f quarkus-deployment.yaml
    - kubectl apply -f quarkus-service.yaml
    - kubectl apply -f quarkus-hpa.yaml
    - kubectl apply -f network-policy-np.yaml
    - sed -i "s/yourdomain.com/$DOMAIN/g" ingress.yaml
    - kubectl apply -f ingress.yaml
    - kubectl apply -f vault-job.yaml
  needs: ["deploy_infrastructure"]
  tags:
    - k8s

verify_deployment:
  stage: verify
  script:
    - kubectl get pods -o wide
    - kubectl get svc
    - kubectl get ingress
    - |
      VM_POD=$(kubectl get pods -l kubevirt.io/domain=$VM_NAME -o jsonpath='{.items[0].metadata.name}')
      kubectl exec $VM_POD -- nginx -t
      kubectl exec $VM_POD -- systemctl status nginx
    - |
      ENDPOINT="https://$DOMAIN/health"
      for i in {1..10}; do
        if curl -s -o /dev/null -w "%{http_code}" $ENDPOINT | grep -q "200"; then
          break
        fi
        sleep 10
      done
  needs: ["deploy_application"]
  tags:
    - k8s
